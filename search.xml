<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL学习---day02</title>
      <link href="/2021/09/02/MySQL%E5%AD%A6%E4%B9%A0-day02/"/>
      <url>/2021/09/02/MySQL%E5%AD%A6%E4%B9%A0-day02/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> MySQL学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习---day01</title>
      <link href="/2021/09/02/MySQL%E5%AD%A6%E4%B9%A0-day01/"/>
      <url>/2021/09/02/MySQL%E5%AD%A6%E4%B9%A0-day01/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> MySQL学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式以及网络编程</title>
      <link href="/2021/09/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BB%A5%E5%8F%8A%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2021/09/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BB%A5%E5%8F%8A%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lock锁以及线程</title>
      <link href="/2021/09/02/Lock%E9%94%81%E4%BB%A5%E5%8F%8A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2021/09/02/Lock%E9%94%81%E4%BB%A5%E5%8F%8A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程</title>
      <link href="/2021/09/02/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2021/09/02/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符流和序列化</title>
      <link href="/2021/09/02/%E5%AD%97%E7%AC%A6%E6%B5%81%E5%92%8C%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2021/09/02/%E5%AD%97%E7%AC%A6%E6%B5%81%E5%92%8C%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归思想以及IO流</title>
      <link href="/2021/09/02/%E9%80%92%E5%BD%92%E6%80%9D%E6%83%B3%E4%BB%A5%E5%8F%8AIO%E6%B5%81/"/>
      <url>/2021/09/02/%E9%80%92%E5%BD%92%E6%80%9D%E6%83%B3%E4%BB%A5%E5%8F%8AIO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Treeset以及Map</title>
      <link href="/2021/09/02/Treeset%E4%BB%A5%E5%8F%8AMap/"/>
      <url>/2021/09/02/Treeset%E4%BB%A5%E5%8F%8AMap/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型以及set集合</title>
      <link href="/2021/09/02/%E6%B3%9B%E5%9E%8B%E4%BB%A5%E5%8F%8Aset%E9%9B%86%E5%90%88/"/>
      <url>/2021/09/02/%E6%B3%9B%E5%9E%8B%E4%BB%A5%E5%8F%8Aset%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List集合的练习</title>
      <link href="/2021/09/02/List%E9%9B%86%E5%90%88%E7%9A%84%E7%BB%83%E4%B9%A0/"/>
      <url>/2021/09/02/List%E9%9B%86%E5%90%88%E7%9A%84%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/2021/09/02/%E9%93%BE%E8%A1%A8/"/>
      <url>/2021/09/02/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2021/09/02/%E6%95%B0%E7%BB%84/"/>
      <url>/2021/09/02/%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合以及迭代器</title>
      <link href="/2021/09/02/%E9%9B%86%E5%90%88%E4%BB%A5%E5%8F%8A%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>/2021/09/02/%E9%9B%86%E5%90%88%E4%BB%A5%E5%8F%8A%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String类以及StringBuffer类</title>
      <link href="/2021/09/02/String%E7%B1%BB%E4%BB%A5%E5%8F%8AStringBuffer%E7%B1%BB/"/>
      <url>/2021/09/02/String%E7%B1%BB%E4%BB%A5%E5%8F%8AStringBuffer%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中一些常用的类以及API帮助文档</title>
      <link href="/2021/09/02/Java%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84%E7%B1%BB%E4%BB%A5%E5%8F%8AAPI%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/"/>
      <url>/2021/09/02/Java%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84%E7%B1%BB%E4%BB%A5%E5%8F%8AAPI%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限修饰符以及内部类</title>
      <link href="/2021/09/02/%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%BB%A5%E5%8F%8A%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/2021/09/02/%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%BB%A5%E5%8F%8A%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象类，接口以及形式参数</title>
      <link href="/2021/09/02/%E6%8A%BD%E8%B1%A1%E7%B1%BB%EF%BC%8C%E6%8E%A5%E5%8F%A3%E4%BB%A5%E5%8F%8A%E5%BD%A2%E5%BC%8F%E5%8F%82%E6%95%B0/"/>
      <url>/2021/09/02/%E6%8A%BD%E8%B1%A1%E7%B1%BB%EF%BC%8C%E6%8E%A5%E5%8F%A3%E4%BB%A5%E5%8F%8A%E5%BD%A2%E5%BC%8F%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>final关键字以及多态的概述</title>
      <link href="/2021/09/02/final%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%A4%9A%E6%80%81%E7%9A%84%E6%A6%82%E8%BF%B0/"/>
      <url>/2021/09/02/final%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%A4%9A%E6%80%81%E7%9A%84%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的代码块以及方法的重写</title>
      <link href="/2021/09/02/Java%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%A0%81%E5%9D%97%E4%BB%A5%E5%8F%8A%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99/"/>
      <url>/2021/09/02/Java%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%A0%81%E5%9D%97%E4%BB%A5%E5%8F%8A%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h1 id="Java中的代码块，继承以及方法的重写"><a href="#Java中的代码块，继承以及方法的重写" class="headerlink" title="Java中的代码块，继承以及方法的重写"></a>Java中的代码块，继承以及方法的重写</h1><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>Java中，使用{}括起来的称为代码块，根据其位置和声明的不同，可以分为局部代码块、构造代码块、静态代码块、同步代码块（多线程再涉及）</p><h3 id="局部代码块"><a href="#局部代码块" class="headerlink" title="局部代码块"></a>局部代码块</h3><p>在方法中出现：限定变量的生命周期，及早释放，提高内存利用<br>只有这一种在一个类出现的时候执行顺序是自上而下的</p><h3 id="构造代码块："><a href="#构造代码块：" class="headerlink" title="构造代码块："></a>构造代码块：</h3><p>在类中方法外出现，多个构造方法中相同的代码存放到一起，每次调用构造都执行，并且在构造方法前执行</p><h3 id="静态代码块："><a href="#静态代码块：" class="headerlink" title="静态代码块："></a>静态代码块：</h3><p>在方法外出现，加上static修饰，用于给类进行初始化，在加载的时候就执行，并且只执行一次</p><h4 id="执行顺序："><a href="#执行顺序：" class="headerlink" title="执行顺序："></a>执行顺序：</h4><p>局部代码块——静态代码块（有多少执行多少，只执行一次，自上而下）——构造代码块——构造方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Code</span></span>&#123;</span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">200</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    Code()&#123;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">300</span>;</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">100</span>;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">100</span>;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> y = <span class="number">200</span>;</span><br><span class="line">            System.out.println(y);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">        Code c = <span class="keyword">new</span> Code();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">        Code c1 = <span class="keyword">new</span> Code();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">        Code c2 = <span class="keyword">new</span> Code();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//100</span></span><br><span class="line"><span class="comment">//200</span></span><br><span class="line"><span class="comment">//----------------------</span></span><br><span class="line"><span class="comment">//200</span></span><br><span class="line"><span class="comment">//100</span></span><br><span class="line"><span class="comment">//300</span></span><br><span class="line"><span class="comment">//----------------------</span></span><br><span class="line"><span class="comment">//100</span></span><br><span class="line"><span class="comment">//300</span></span><br><span class="line"><span class="comment">//----------------------</span></span><br><span class="line"><span class="comment">//100</span></span><br><span class="line"><span class="comment">//300</span></span><br><span class="line"><span class="comment">//----------------------</span></span><br><span class="line"></span><br><span class="line">先执行主函数中的局部代码块，输出<span class="number">100</span>、<span class="number">200</span>，之后是<span class="keyword">new</span>了一个Code对象出来，执行的是静态代码块（一次），再到构造代码块，再到构造方法。</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h3><p>多个类中存在相同的属性和行为时，将这些内容抽取到单独的一个类，那么多个类无需再定义这些属性和行为，只要继承这个类即可<br>通过extends关键字可以实现类与类的继承</p><blockquote><pre><code>  class 子类名 extends 父类名 &#123;&#125;</code></pre></blockquote><p>单独的这个类称为父类，基类或者超类；这多个类可以称为子类或者派生类<br>有了继承之后，我们定义一个类的时候，可以在已经存在的类的基础上，还可以定义自己的新成员。</p><h3 id="好处"><a href="#好处" class="headerlink" title="好处:"></a>好处:</h3><p>提高了代码的复用性</p><p>提高了代码的维护性</p><p>让类与类之间产生关系，为后面的多态做准备</p><h3 id="坏处"><a href="#坏处" class="headerlink" title="坏处:"></a>坏处:</h3><p>类的耦合性增强了<br>开发的原则：低耦合、高内聚<br>耦合：类与类之间的关系<br>内聚：就是自己完成某件事情的能力</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student1</span> <span class="keyword">extends</span> <span class="title">Person1</span></span>&#123; <span class="comment">//Student1是继承Person1来的，或者说是继承自Person1的子类</span></span><br><span class="line">    String stuId;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打游戏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher1</span> <span class="keyword">extends</span> <span class="title">Person1</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student1 student1 = <span class="keyword">new</span> Student1();</span><br><span class="line">        student1.eat();</span><br><span class="line">        student1.sleep();</span><br><span class="line">        student1.study();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        Teacher1 teacher1 = <span class="keyword">new</span> Teacher1();</span><br><span class="line">        teacher1.eat();</span><br><span class="line">        teacher1.sleep();</span><br><span class="line">        teacher1.study();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//吃饭</span></span><br><span class="line"><span class="comment">//睡觉</span></span><br><span class="line"><span class="comment">//学习</span></span><br><span class="line"><span class="comment">//----------------------------</span></span><br><span class="line"><span class="comment">//吃饭</span></span><br><span class="line"><span class="comment">//睡觉</span></span><br><span class="line"><span class="comment">//学习</span></span><br><span class="line"></span><br><span class="line">继承很好的提高了代码的复用性</span><br></pre></td></tr></table></figure><h3 id="Java中继承的特点："><a href="#Java中继承的特点：" class="headerlink" title="Java中继承的特点："></a>Java中继承的特点：</h3><p>  Java只支持单继承，不支持多继承</p><p>  Java支持多层基础（继承体系）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//class Father&#123;&#125;</span></span><br><span class="line"><span class="comment">//class Mother&#123;&#125;</span></span><br><span class="line"><span class="comment">//class Son extends Father&#123;&#125;</span></span><br><span class="line"><span class="comment">//class Son extends Father,Mother&#123;&#125;//错误</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrandFather</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是爷爷&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">GrandFather</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是爸爸&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是儿子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Son son = <span class="keyword">new</span> Son();</span><br><span class="line">        son.show2();</span><br><span class="line">        son.show1();</span><br><span class="line">        son.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是儿子</span></span><br><span class="line"><span class="comment">//这是爸爸</span></span><br><span class="line"><span class="comment">//这是爷爷</span></span><br></pre></td></tr></table></figure><h3 id="使用继承的注意事项："><a href="#使用继承的注意事项：" class="headerlink" title="使用继承的注意事项："></a>使用继承的注意事项：</h3><p>  子类只能继承父类所有的非私有的成员（非私有的成员方法和非私有的成员变量）</p><p>  子类不能继承父类的构造方法，但是可以通过super关键字来访问父类的构造方法</p><p>  不要为了部分功能而去继承</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">通过观察发现，出现了一个show2()方法，在类A和类B中都出现了，用继承实现</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这样继承，我们发现show1()并不是我们B类中方法，但是我们一并继承过来了</span></span><br><span class="line"><span class="comment">//使用继承的情况：is a</span></span><br><span class="line"><span class="comment">//满足这一条件就可以使用继承</span></span><br><span class="line"><span class="comment">//Person</span></span><br><span class="line"><span class="comment">//Student</span></span><br><span class="line"><span class="comment">//Teacher</span></span><br><span class="line"><span class="comment">//Doctor</span></span><br></pre></td></tr></table></figure><h3 id="继承与成员变量的关系："><a href="#继承与成员变量的关系：" class="headerlink" title="继承与成员变量的关系："></a>继承与成员变量的关系：</h3><h4 id="类的组成："><a href="#类的组成：" class="headerlink" title="类的组成："></a>类的组成：</h4><p>成员变量<br>成员方法<br>构造方法<br>引入继承之后，我们开始考虑继承与这些的关系<br>1、当父类的成员变量与子类的成员变量不一样的时候<br>2、当父类的成员变量与子类的成员变量一样的时候<br>查找顺序：<br>1、在子类方法的局部范围找，找到返回<br>2、在子类方法的成员范围找，找到返回<br>3、在父类方法的成员范围找，找到返回<br>4、都找不到，报错</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father2</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num3 = <span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span> <span class="keyword">extends</span> <span class="title">Father2</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">40</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        System.out.println(num2);</span><br><span class="line"><span class="comment">//        System.out.println(num3);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Son2 son2 = <span class="keyword">new</span> Son2();</span><br><span class="line">        son2.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//40</span></span><br><span class="line"><span class="comment">//20</span></span><br></pre></td></tr></table></figure><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p>当我们不仅想输出局部范围的num，还想输出父类中的num，我们应该怎么做呢<br>Java中提供了一个关键字：super</p><h4 id="super和this的区别是什么呢？（面试题）"><a href="#super和this的区别是什么呢？（面试题）" class="headerlink" title="super和this的区别是什么呢？（面试题）"></a>super和this的区别是什么呢？（面试题）</h4><p>this代表当前对象的引用<br>super代表的是父类存储空间的标识（可以操作父类的成员）</p><h4 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a>怎么使用？</h4><h5 id="调用成员变量"><a href="#调用成员变量" class="headerlink" title="调用成员变量"></a>调用成员变量</h5><p>this.成员变量 调用的是本类的成员变量<br>super.成员变量 调用的是父类的成员变量<br>访问构造方法（子父类的构造方法）<br>this(…) super(…)<br>访问成员方法<br>this.成员方法() super.成员方法()<br>super关键字的使用举例代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father3</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son3</span> <span class="keyword">extends</span> <span class="title">Father3</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.num);</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Son3 son3 = <span class="keyword">new</span> Son3();</span><br><span class="line">        son3.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//30</span></span><br><span class="line"><span class="comment">//20</span></span><br><span class="line"><span class="comment">//10</span></span><br></pre></td></tr></table></figure><h3 id="继承与构造方法的关系"><a href="#继承与构造方法的关系" class="headerlink" title="继承与构造方法的关系"></a>继承与构造方法的关系</h3><p>   子类中所有的构造方法默认都会访问父类中空参的构造方法</p><p>   为什么？<br>   因为子类会继承父类的数据，可能还会使用父类的数据<br>   所以在初始化子类之前，一定会先完成父类的初始化</p><p> 注意：<br>   每一个子类的构造方法的第一句话默认都是super()</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father4</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是父类的无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father4</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是父类的有参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son4</span> <span class="keyword">extends</span> <span class="title">Father4</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是子类的无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son4</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是子类的有参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Son4 son4 = <span class="keyword">new</span> Son4();</span><br><span class="line">        Son4 son5 = <span class="keyword">new</span> Son4(<span class="string">&quot;祥哥&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是父类的无参构造方法</span></span><br><span class="line"><span class="comment">//这是子类的无参构造方法</span></span><br><span class="line"><span class="comment">//这是父类的无参构造方法</span></span><br><span class="line"><span class="comment">//这是子类的有参构造方法</span></span><br></pre></td></tr></table></figure><p>但是，当父类没有无参构造方法的时候，怎么办呢</p><p>使用super带参的形式去访问父类的带参构造方法<br>子类通过this去调用本类的其他构造方法<br>本类其他构造方法也必须首先访问父类的构造方法<br>使用this就是间接的调用super去访问父类的构造方法<br>注意事项：</p><p>super(…)或者this(…)必须出现在第一条语句上<br>否则，就会有父类数据的多次初始化，每个类只能初始化一次</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father5</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father5</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的有参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son5</span> <span class="keyword">extends</span> <span class="title">Father5</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();<span class="comment">//JVM虚拟机会默认在调用子类构造方法的时候添加一个super()，而且必须放在第一句</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类的无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son5</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        this(&quot;hb&quot;);</span></span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;hb&quot;</span>);<span class="comment">//这是调用父类的有参构造方法</span></span><br><span class="line">        <span class="comment">//这里的this或者super只能出现一个，我的解释是：如果出现多个，或者同时出现</span></span><br><span class="line">        <span class="comment">//会造成父类数据的多次初始化，但每个类只能初始化一次</span></span><br><span class="line">        <span class="comment">//使用super可以理解是父类的带参的调用</span></span><br><span class="line">        <span class="comment">//使用this时，也需要继承父类，，也会有super的出现，所以也会造成父类的初始化</span></span><br><span class="line">        <span class="comment">//所以只能有一个</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类的带参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Son5 son5 = <span class="keyword">new</span> Son5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承中成员方法的关系："><a href="#继承中成员方法的关系：" class="headerlink" title="继承中成员方法的关系："></a>继承中成员方法的关系：</h3><p>子类的成员方法与父类的成员方法不一样</p><p>子类的成员方法与父类的成员方法一样的时候，怎么办</p><p>​    先找到子类，有没有这个方法，如果有，就调用</p><p>​    如果子类中没有这个方法，就去父类中找，如果有，就调用</p><p>​    如果都没有，就报错 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father6</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is show()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son6</span> <span class="keyword">extends</span> <span class="title">Father6</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is son6 show2()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public void show()&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;this is son6 show()&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo8</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Son6 son6 = <span class="keyword">new</span> Son6();</span><br><span class="line">        son6.show();</span><br><span class="line">        son6.show2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//this is show()</span></span><br><span class="line"><span class="comment">//this is son6 show2()</span></span><br></pre></td></tr></table></figure><h2 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h2><p>方法的重写：<br>子类中如果出现了和父类中一模一样的方法声明，也被称为方法覆盖，方法复写</p><p>方法的重载：<br>本类中出现了方法名一样，参数列表不一样的方法，与返回值无关</p><p>子类的成员方法与父类的成员方法一样的时候，怎么办<br>1、先找子类中，有没有这个方法，如果有，就调用<br>2、如果子类中没有该方法，就去父类中查找，如果有，就调用<br>3、如果都没有，就报错</p><h3 id="方法重写的注意事项"><a href="#方法重写的注意事项" class="headerlink" title="方法重写的注意事项:"></a>方法重写的注意事项:</h3><p>1、父类的私有方法不能被重写<br>2、子类重写父类方法时，访问权限不能低<br>要么子类重写的方法比父类的权限高，要么一样<br>3、父类的静态方法，子类也必须通过静态方法进行重写（其实算不上重写）</p>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造方法以及静态的main方法</title>
      <link href="/2021/09/02/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E9%9D%99%E6%80%81%E7%9A%84main%E6%96%B9%E6%B3%95/"/>
      <url>/2021/09/02/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E9%9D%99%E6%80%81%E7%9A%84main%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="构造方法以及静态的main方法"><a href="#构造方法以及静态的main方法" class="headerlink" title="构造方法以及静态的main方法"></a>构造方法以及静态的main方法</h1><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>概述：<br>给对象的数据进行初始化。</p><h3 id="构造方法格式："><a href="#构造方法格式：" class="headerlink" title="构造方法格式："></a>构造方法格式：</h3><p>方法名和类名相同<br>没有返回值，连void都没有<br>没有具体的返回值</p><h3 id="构造方法的注意事项："><a href="#构造方法的注意事项：" class="headerlink" title="构造方法的注意事项："></a>构造方法的注意事项：</h3><p>如果不提供构造方法，系统会默认给出构造方法<br>如果自己提供了构造方法，系统将不再提供<br>构造方法也可以重载</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contruction</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    Contruction()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这就是一个构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContructionDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Contruction contruction = <span class="keyword">new</span> Contruction();</span><br><span class="line">        System.out.println(contruction);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这就是一个构造方法</span></span><br><span class="line"><span class="comment">//com.bigdata.shujia10.Contruction@28d93b30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//我们可以看到，在这里，我们只是new了一个contruction，就直接打印出来了“这是一个构造方法”，就是因为我们自己定义了一个构造方法，并给了它一个print</span></span><br></pre></td></tr></table></figure><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>1、如果我们没有给出构造方法，JVM会自动给我们提供一个无参构造方法<br>2、如果我们给出了构造方法，JVM就不再提供默认的无参构造方法。<br>这时候如果我们还想使用无参构造方法，就必须要自己给出来，JVM一旦发现我们自己给出了构造方法（不管是有参还是无参，只要我们自己定义了），就永远不会给出默认的构造方法。<br>3、构造方法可以发生重载（方法名一致，参数列表不一样）。</p><h3 id="构造方法的作用："><a href="#构造方法的作用：" class="headerlink" title="构造方法的作用："></a>构造方法的作用：</h3><p>可以给成员变量赋初始化值。<br>给成员变量赋值的两种方式：<br>1、使用setXxx()的形式给私有的成员变量赋值<br>2、使用带参数的构造方法给私有成员变量赋值，配合this指针使用<br>无参有参构造方法举例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contruction2</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    Contruction2()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Contruction2(String name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是带有参数name的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Contruction2(<span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是带有参数age的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Contruction2(String name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是带有参数name和参数age的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;---&quot;</span>+<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContructionDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里调用无参构造方法</span></span><br><span class="line">        Contruction2 contruction2 = <span class="keyword">new</span> Contruction2();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里调用一个参数的构造方法</span></span><br><span class="line">        Contruction2 contruction21 = <span class="keyword">new</span> Contruction2(<span class="string">&quot;酷酷的涛&quot;</span>);</span><br><span class="line">        Contruction2 contruction22 = <span class="keyword">new</span> Contruction2(<span class="number">22</span>);</span><br><span class="line">        System.out.println(contruction22.getName()+<span class="string">&quot;---&quot;</span>+contruction22.getAge());</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//这里调用两个参数的构造方法</span></span><br><span class="line">        Contruction2 contruction23 = <span class="keyword">new</span> Contruction2(<span class="string">&quot;酷酷的涛&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        contruction23.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是一个无参构造方法</span></span><br><span class="line"><span class="comment">//这是带有参数name的构造方法</span></span><br><span class="line"><span class="comment">//这是带有参数age的构造方法</span></span><br><span class="line"><span class="comment">//null---22</span></span><br><span class="line"><span class="comment">//这是带有参数name和参数age的构造方法</span></span><br><span class="line"><span class="comment">//酷酷的涛---22</span></span><br></pre></td></tr></table></figure><h2 id="类的组成："><a href="#类的组成：" class="headerlink" title="类的组成："></a>类的组成：</h2><p>成员变量<br>构造方法<br>成员方法<br>根据返回值：<br>void，无返回值类型<br>非void的有参构造类型<br>形式参数：<br>空参的构造方法<br>有参的构造方法</p><p>当我们在new对象的时候，其实JVM给出了一系列运行，如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;亚当&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    Person()&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;夏娃&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.age = <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;---&quot;</span>+<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.show();</span><br><span class="line"><span class="comment">//        System.out.println();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图解如下所示:</p><p><img src="https://i.loli.net/2021/09/02/LlcPKZzSvtf6s4a.png"></p><blockquote><p>首先是<br>将Person.class文件加载到方法区<br>再在栈中给person开辟一个栈内存空间<br>再在堆中给person开辟一个堆内存空间<br>紧接着JVM给成员变量赋予初始值，一个是null，一个是0<br>再给成员变量进行初始化<br>再通过构造方法对成员变量进行初始化<br>数据初始化完毕，将内存中的地址给栈引用</p></blockquote><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><p>可以修饰成员变量和成员方法<br>static关键字的特点：<br>随着类的加载而加载<br>优先于对象存在<br>被类的所有对象共享（这也是判断是否使用静态关键字的条件）<br>可以通过类名调用<br>static关键字注意事项：<br>在静态方法中是没有this关键字的<br>静态方法只能访问静态的成员变量和静态的成员方法<br>一般情况下，只要看到一个类中有静态修饰的成员变量或者是成员方法，我们一律采用 类名.静态成员 这种方法使用<br>推荐使用类名调用<br>静态修饰的内容我们一般称为：类成员、与类相关的</p><h3 id="static关键字使用的注意事项"><a href="#static关键字使用的注意事项" class="headerlink" title="static关键字使用的注意事项"></a>static关键字使用的注意事项</h3><p>在静态方法中是没有this关键字的<br>静态方法：<br>访问内容：<br>成员变量：只能访问静态的成员变量<br>成员方法：只能访问静态的成员方法<br>非静态方法：<br>访问内容：<br>成员变量：既可以访问静态的成员变量，也可以访问非静态的成员变量<br>成员方法：既可以访问静态的成员方法，也可以访问非静态的成员方法<br>也就是：静态的只能访问静态的。</p><p>举例：静态的只能访问静态的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">    <span class="comment">//非静态的成员变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//静态的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非静态的成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        System.out.println(num2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//静态的成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(this.num);//无法从静态上下文中引用非静态 变量 this</span></span><br><span class="line">        System.out.println(num2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//静态的成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//非静态的成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Teacher teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line">        teacher.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//20 </span></span><br></pre></td></tr></table></figure><p>此时的内存静态图如下所示:</p><p><img src="https://i.loli.net/2021/09/02/jJ2YFmhPZy3Cdt5.png"></p><p>static随着类的加载而加载</p><h4 id="static内存图。"><a href="#static内存图。" class="headerlink" title="static内存图。"></a>static内存图。</h4><p>用下面这些代码来解释在有static静态关键字的时候，内存是如果工作的。<br>将内存分为 栈、堆、方法区、静态区<br>首先方法里面有 class文件区、Human的方法区、静态区<br>1、首先运行主函数main，在栈中开辟main(String[] args)空间<br>2、紧接着到了函数Human h1 = new Human(“朱一龙”,41,“中国”);<br>3、在堆中new了一个空间出来，地址是0x0001，给name和age赋<br>初始值，Human中又包括了静态引用和方法引用。<br>h1指向0x0001，之后将name赋值为“朱一龙”，将<br>age赋值为41，紧接着到了静态引用，将country赋值为中国<br>再到了方法引用，然后到了方法引用，里面包括了构造方法和<br>show方法，之后展示数据</p><p>之后就在不断的重复这一过程。</p><p>main方法的格式讲解<br>main方法的格式讲解：<br><code>public static void main(String[] args) &#123;…&#125;</code></p><p>public: 公共的，访问权限是最大的。JVM默认的就是它。<br>    由于main方法是被JVM调用的，所以他的权限要是最大的。<br>static:静态的，不需要创建对象，通过类名就可以调用，方便我们JVM虚拟机调用<br>void:无返回值的意思，一般情况下，方法写返回是为了将结果返回给调用者，<br>   而main方法是被JVM虚拟机调用的，写返回内容没有意义。<br>main:是一个方法名，也是java程序的入口方法。大部分的语言入口的名字都是main<br>    小部分的程序入口方法不是main,例如C语言，底层调用的是_start</p>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础小知识</title>
      <link href="/2021/09/02/Java%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
      <url>/2021/09/02/Java%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="主要说说成员变量与局部变量的区别、形式参数、匿名对象与Java的封装性。"><a href="#主要说说成员变量与局部变量的区别、形式参数、匿名对象与Java的封装性。" class="headerlink" title="主要说说成员变量与局部变量的区别、形式参数、匿名对象与Java的封装性。"></a>主要说说成员变量与局部变量的区别、形式参数、匿名对象与Java的封装性。</h1><h2 id="成员变量和局部变量的区别"><a href="#成员变量和局部变量的区别" class="headerlink" title="成员变量和局部变量的区别"></a>成员变量和局部变量的区别</h2><h3 id="在类中定义的位置不同："><a href="#在类中定义的位置不同：" class="headerlink" title="在类中定义的位置不同："></a>在类中定义的位置不同：</h3><p>成员变量：类中，但是定义在方法外。<br>局部变量：定义在方法类中。</p><h3 id="在内存中的位置不同："><a href="#在内存中的位置不同：" class="headerlink" title="在内存中的位置不同："></a>在内存中的位置不同：</h3><p>成员变量：定义在堆中。<br>局部变量：定义在栈中。</p><h3 id="生命周期不同："><a href="#生命周期不同：" class="headerlink" title="生命周期不同："></a>生命周期不同：</h3><p>成员变量：随着对象的创建而存在，随着对象的结束而结束。<br>局部变量：随着方法的调用而存在，随着方法的结束而结束。</p><h3 id="初始化值不同："><a href="#初始化值不同：" class="headerlink" title="初始化值不同："></a>初始化值不同：</h3><p>成员变量：有默认的初始化值，比如int给的是0，String类型给的是null<br>局部变量：没有系统给它初始化值，必须在定义的时候给它赋值，才能使用。<br>注意：<br>1、方法与方法之间里面的局部变量不能互相调用。<br>2、局部变量可以和成员变量一样，在方法中使用的时候，采用就近原则。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BianLiang</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        int n1;</span></span><br><span class="line">        <span class="keyword">int</span>  n1 = <span class="number">22</span>;</span><br><span class="line">        String name = <span class="string">&quot;酷酷的涛&quot;</span>;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(n1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BianLiangDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BianLiang b1 = <span class="keyword">new</span> BianLiang();</span><br><span class="line">        b1.show(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//访问成员变量</span></span><br><span class="line">        System.out.println(b1.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//酷酷的涛</span></span><br><span class="line"><span class="comment">//22</span></span><br><span class="line"><span class="comment">//null</span></span><br></pre></td></tr></table></figure><h2 id="形式参数的问题"><a href="#形式参数的问题" class="headerlink" title="形式参数的问题"></a>形式参数的问题</h2><p>在调用方法时，括号里面的参数有两种类型，一种是基本数据类型，一种是引用数据类型。<br>基本数据类型：形式参数的改变不会影响到实际参数。<br>引用数据类型：形式参数的改变会直接影响到实际参数。</p><h2 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h2><p>匿名对象：就是没有名字的对象。<br>匿名对象的使用场景：<br>1、调用方法的时候，仅仅调用一次的时候，调用多次的时候，不适合。<br>为什么会存在匿名对象？<br>因为匿名调用完毕之后，由于栈内存中没有引用指向它，那么调用完毕之后就是垃圾，可以被垃圾回收器回收。<br>2、匿名对象可以作为实际参数进行传递。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机可以打电话。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone1Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">(Phone1 p)</span> </span>&#123;</span><br><span class="line">        p.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymousDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个Phone1对象</span></span><br><span class="line">        Phone1 p = <span class="keyword">new</span> Phone1();</span><br><span class="line">        p.call();</span><br><span class="line">        <span class="comment">//创建一个Phone1Demo对象</span></span><br><span class="line">        Phone1Demo p1 = <span class="keyword">new</span> Phone1Demo();</span><br><span class="line">        p1.function(p);</span><br><span class="line">        System.out.println(<span class="string">&quot;******************使用匿名类进行改进***********************&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Phone1().call();</span><br><span class="line">        <span class="keyword">new</span> Phone1Demo().function(p);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//手机可以打电话。</span></span><br><span class="line"><span class="comment">//手机可以打电话。</span></span><br><span class="line"><span class="comment">//******************使用匿名类进行改进***********************</span></span><br><span class="line"><span class="comment">//手机可以打电话。</span></span><br><span class="line"><span class="comment">//手机可以打电话。</span></span><br></pre></td></tr></table></figure><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="封装：其实就是指隐藏对象的属性和相关实现细节，仅仅对外提供公共访问的方式。Java中提供了一个关键字：private"><a href="#封装：其实就是指隐藏对象的属性和相关实现细节，仅仅对外提供公共访问的方式。Java中提供了一个关键字：private" class="headerlink" title="封装：其实就是指隐藏对象的属性和相关实现细节，仅仅对外提供公共访问的方式。Java中提供了一个关键字：private"></a>封装：其实就是指隐藏对象的属性和相关实现细节，仅仅对外提供公共访问的方式。Java中提供了一个关键字：private</h3><p>private：私有的，可以修饰成员变量和成员方法。<br>注意：被private修饰的成员变量或者是成员方法，只能在本类中访问</p><blockquote><p>对private的使用<br>1、对成员变量用private进行修饰<br>2、提供对应的getXxx()和setXxx()方法</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义成员变量</span></span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age ;</span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a )</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;<span class="number">0</span> || a&gt;=<span class="number">200</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;赋值的年龄有问题&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            age = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄是：&quot;</span>+age);</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名是：&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student2 stu2 = <span class="keyword">new</span> Student2();</span><br><span class="line">        stu2.setAge(<span class="number">22</span>);</span><br><span class="line"><span class="comment">//        stu2.age = 1000;    //这时，这一行直接报错，因为age被定义为私有属性，不能被直接访问</span></span><br><span class="line">        stu2.name = <span class="string">&quot;酷酷的涛&quot;</span>;</span><br><span class="line">        stu2.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//年龄是：22</span></span><br><span class="line"><span class="comment">//姓名是：酷酷的涛</span></span><br></pre></td></tr></table></figure><h2 id="This关键字"><a href="#This关键字" class="headerlink" title="This关键字"></a>This关键字</h2><p>变量的使用原则：就近原则<br>直接通过类名.成员变量是报错的<br>如果这个Student3这个对象存在，它就代表着一个学生对象<br>但是，谁可以代表这个当前类的对象呢<br>Java中提供了一个关键字：this<br>举例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student3</span></span>&#123;</span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对name成员变量进行赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//变量的使用原则：就近原则</span></span><br><span class="line">        <span class="comment">//直接通过类名.成员变量是报错的，目前还没有说过类似的用法，所以这个是有问题的</span></span><br><span class="line">        <span class="comment">//如果这个Student3这个对象存在，他就代表着一个学生对象</span></span><br><span class="line">        <span class="comment">//但是，谁可以代表这个当前类的对象呢？</span></span><br><span class="line">        <span class="comment">//Java就提供了一个关键字：this</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student3 stu3 = <span class="keyword">new</span> Student3();</span><br><span class="line">        stu3.setAge(<span class="number">22</span>);</span><br><span class="line">        stu3.setName(<span class="string">&quot;酷酷的涛&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> age = stu3.getAge();</span><br><span class="line">        String name = stu3.getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;**********&quot;</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//酷酷的涛**********22</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据加密---Java实现</title>
      <link href="/2021/09/02/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86-Java%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/09/02/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86-Java%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="数据加密–Java实现"><a href="#数据加密–Java实现" class="headerlink" title="数据加密–Java实现"></a>数据加密–Java实现</h1><p>某个公司采用公用电话传递数据信息，数据是小于8位的整数，为了确保安全，在传递过程中需要加密，加密规则如下：<br>首先将数据倒序，然后将每位数字都加上5，再用和除以10的余数代替该数字，<br>最后将第一位和最后一位数字交换。 请任意给定一个小于8位的整数，<br>然后，把加密后的结果在控制台打印出来。<br>代码实现如下所示:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShuJuJiaMiDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个数据</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">123456</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="comment">//把数据上的每一位数字按照顺序放到数组中</span></span><br><span class="line">        <span class="comment">//由于，我们已经获取到了每一个数字了，所以我们干脆直接逆序赋值</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        int index = 0;</span></span><br><span class="line"><span class="comment">        arr[index] = num%10;</span></span><br><span class="line"><span class="comment">        index++;</span></span><br><span class="line"><span class="comment">        arr[index] = num/10%10;</span></span><br><span class="line"><span class="comment">        index++;</span></span><br><span class="line"><span class="comment">        arr[index] = num/10/10%10;</span></span><br><span class="line"><span class="comment">        index++;</span></span><br><span class="line"><span class="comment">        arr[index] = num/10/10/10%10;</span></span><br><span class="line"><span class="comment">        index++;</span></span><br><span class="line"><span class="comment">        arr[index] = num/10/10/10/10%10;</span></span><br><span class="line"><span class="comment">        index++;</span></span><br><span class="line"><span class="comment">        arr[index] = num/10/10/10/10/10%10;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">//用while循环改进，由于今后我们会手动输入整数，不确定长度</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            arr[index] = num%<span class="number">10</span>;</span><br><span class="line">            index++;</span><br><span class="line">            num = num/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将每位数字都加上5，再用和除以10的余数代替该数字</span></span><br><span class="line">        <span class="comment">//由于我们在给数组赋值的时候，循环结束的条件是num &gt; 0，index的变化只变化到数据的长度对应的索引+1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;index;i++)&#123;</span><br><span class="line">            arr[i]+=<span class="number">5</span>;</span><br><span class="line">            arr[i]%=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">//最后将第一位和最后一位数字交换</span></span><br><span class="line">        <span class="keyword">int</span> tmp = arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>]=arr[index-<span class="number">1</span>];</span><br><span class="line">        arr[index-<span class="number">1</span>] = tmp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;123456加密后的数据是：&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;index;i++)&#123;</span><br><span class="line">            System.out.print(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类与对象</title>
      <link href="/2021/09/02/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/09/02/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><h2 id="引入面向对象的思想："><a href="#引入面向对象的思想：" class="headerlink" title="引入面向对象的思想："></a>引入面向对象的思想：</h2><p>当我们有多个数组需要遍历时，我们可以将遍历的代码封装到方法中，需要遍历时，只需要调用相应的方法即可，提高代码的复用性。<br>但当我们对数组做更多的操作时，比如对数组获取最值，数值逆序，就需要将更多的功能封装到相应的方法中，封装的方法越来越多，我们就可以将这些方法继续封装，将来再做数组的操作时，就不用找具体的方法，先找到这个类，再使用这个类中的方法，这就是面向对象思想的编程。</p><h3 id="面向对象的思想："><a href="#面向对象的思想：" class="headerlink" title="面向对象的思想："></a>面向对象的思想：</h3><p>面向对象的思想是基于面向过程的编程思想</p><h3 id="面向过程：强调的是每个功能的步骤（比如C语言）"><a href="#面向过程：强调的是每个功能的步骤（比如C语言）" class="headerlink" title="面向过程：强调的是每个功能的步骤（比如C语言）"></a>面向过程：强调的是每个功能的步骤（比如C语言）</h3><h3 id="面向对象：强调的是对象，然后让这个对象去调用功能"><a href="#面向对象：强调的是对象，然后让这个对象去调用功能" class="headerlink" title="面向对象：强调的是对象，然后让这个对象去调用功能"></a>面向对象：强调的是对象，然后让这个对象去调用功能</h3><p>面向对象的特点：<br>1）是一种更符合我们思想习惯的概念<br>2）可以将复杂的事情简单化<br>3）将我们从执行者变成了指挥者</p><p>举例：<br>吃饭：<br>面向过程：先去超市买菜–洗菜–切菜–炒菜–装盘–吃<br>面向对象：去饭店吃–你（点菜）–厨师（做菜）–服务员（上菜）–你（吃）<br>打水：<br>面向过程：拿起水杯–走到饮水机面前–选择热水还是冷水–接水–喝<br>面向对象：你祈求同桌去接水–同桌接水–你喝水</p><p>将大象装进冰箱<br>面向过程的思路：<br>1、打开冰箱门<br>2、把大象装进冰箱<br>3、关闭冰箱门<br>代码体现：</p><p>代码体现：  </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">              <span class="comment">//System.out.println(&quot;打开冰箱门&quot;);</span></span><br><span class="line">              <span class="comment">//打开冰箱门这个动作，肯定不是这么一个简单输出语句就完事了</span></span><br><span class="line">              <span class="comment">//现在是仅仅是为了演示，就写了这么一个输出语句</span></span><br><span class="line">              <span class="comment">//假设我们要打开很多次冰箱门，就要写很多次这个代码</span></span><br><span class="line">              <span class="comment">//需要用方法改进</span></span><br><span class="line">          open();</span><br><span class="line">          zhuang();</span><br><span class="line">          close();</span><br><span class="line">  </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;打开冰箱门&quot;</span>);​       </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">zhuang</span><span class="params">()</span></span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;把大象装进冰箱&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;关闭冰箱门&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="面向对象的思想体现："><a href="#面向对象的思想体现：" class="headerlink" title="面向对象的思想体现："></a>面向对象的思想体现：</h3><p>我们怎么才能更符合面向对象的思想呢？<br>1、我们要考虑有哪些类？<br>2、这些每个类里面都有些什么呢？<br>3、类与类之间的关系是什么样子的呢？</p><p>把大象装进冰箱的分析：（如何分析有哪些类呢？UML 名词提取法）<br>1、有哪些类呢？<br>大象<br>冰箱<br>测试类<br>2、这些每个类里面都有些什么呢？<br>大象：<br>进冰箱<br>冰箱：<br>打开冰箱门<br>关闭冰箱门<br>测试类：<br>main方法<br>代码体现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Elephant</span></span>&#123;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toBingXiang</span><span class="params">()</span></span>&#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;装进冰箱&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Refrigerator</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;打开冰箱门&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;关闭冰箱门&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">            调用冰箱类中的打开冰箱门的open()方法</span><br><span class="line">            调用大象类中的装进冰箱的toBingXiang()方法</span><br><span class="line">            调用冰箱类中的关闭冰箱门的close()方法</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="面向对象的开发、设计、特征"><a href="#面向对象的开发、设计、特征" class="headerlink" title="面向对象的开发、设计、特征"></a>面向对象的开发、设计、特征</h3><p>面向对象的开发<br>就是不断的创建对象，使用对象，指挥对象做事情。</p><p>面向对象的设计<br>实就是在管理和维护对象之间的关系</p><h4 id="面向对象的特征"><a href="#面向对象的特征" class="headerlink" title="面向对象的特征"></a>面向对象的特征</h4><p>封装<br>继承<br>多态</p><h3 id="类与对象的概述："><a href="#类与对象的概述：" class="headerlink" title="类与对象的概述："></a>类与对象的概述：</h3><p>现实世界中是如何让描述一个事物呢？<br>举例：人<br>五官、姓名、年龄、性别…<br>吃饭、喝水、学习、玩…</p><blockquote><p>属性：事物的描述信息<br>行为：就是事物能够做什么</p></blockquote><p>我们学习编程语言，就是为了模拟现实世界的事物的。<br>而我们现在学习的语言是：java<br>而java中最基本的单位是：类<br>所以，我们通过java把事物用类给描述出来<br>由此可见，我们就可以得到现实生活中的事物与类之间的对应关系：</p><p>事物： 类：<br>属性：事物的描述信息 成员变量<br>行为：就是事物能够做什么 成员方法</p><p>类：是一组相关的属性和行为的集合。是一个抽象的概念。<br>对象：是该类事物的具体表现体现。具体到存在的个体。<br>举例：<br>事物：人 类：Person<br>属性：姓名、年龄、性别 成员变量：name、age、gender<br>行为：吃饭、喝水、学习 成员方法：eat、drink、study</p><p>对象：是该类事物的具体体现 举例：学生、老师、医生、程序员…</p><h4 id="类与对象举例展示"><a href="#类与对象举例展示" class="headerlink" title="类与对象举例展示"></a>类与对象举例展示</h4><p>定义一个手机类来进行测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pho</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义成员变量</span></span><br><span class="line">    <span class="comment">//品牌</span></span><br><span class="line">    String brand;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    String color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义成员方法</span></span><br><span class="line">    <span class="comment">//打电话</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;给&quot;</span>+s+<span class="string">&quot;打电话...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//发短信</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;群发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//玩游戏</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;玩游戏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过手机类创建手机对象</span></span><br><span class="line">        Pho p1 = <span class="keyword">new</span> Pho();</span><br><span class="line">        <span class="comment">//通过实例化出来的p1对象调用属性</span></span><br><span class="line">        System.out.println(p1.brand); <span class="comment">//null</span></span><br><span class="line">        System.out.println(p1.price); <span class="comment">//0</span></span><br><span class="line">        System.out.println(p1.color); <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//给对象的成员变量赋值</span></span><br><span class="line">        p1.brand = <span class="string">&quot;华为&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        p1.price = &quot;9999&quot;; //注意  赋值需要注意成员变量的数据类型</span></span><br><span class="line">        p1.price = <span class="number">9999</span>;</span><br><span class="line">        p1.color = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;手机的牌子是：&quot;</span>+p1.brand); <span class="comment">//&quot;华为&quot;</span></span><br><span class="line">        System.out.println(p1.brand+<span class="string">&quot;的价格是：&quot;</span>+p1.price); <span class="comment">//9999</span></span><br><span class="line">        System.out.println(p1.brand+<span class="string">&quot;的颜色是：&quot;</span>+p1.color); <span class="comment">//&quot;blue&quot;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">//通过对象调用成员方法</span></span><br><span class="line">        p1.call(<span class="string">&quot;马云&quot;</span>); <span class="comment">//注意 调用对象的成员方法的时候，需要注意有无传参</span></span><br><span class="line">        p1.sendMessage();</span><br><span class="line">        p1.playGame();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">null</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="keyword">null</span></span><br><span class="line">手机的牌子是：华为</span><br><span class="line">华为的价格是：<span class="number">9999</span></span><br><span class="line">华为的颜色是：blue</span><br><span class="line">给马云打电话...</span><br><span class="line">群发短信</span><br><span class="line">玩游戏</span><br></pre></td></tr></table></figure><p>一个对象的内存图解如下所示:</p><p><img src="https://i.loli.net/2021/09/02/7kA8BK4wqRy6nic.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pho1</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义成员变量</span></span><br><span class="line">    <span class="comment">//品牌</span></span><br><span class="line">    String brand;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    String color;</span><br><span class="line">    <span class="comment">//定义成员方法</span></span><br><span class="line">    <span class="comment">//打电话</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;给&quot;</span>+s+<span class="string">&quot;打电话...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//发短信</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;群发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//玩游戏</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;玩游戏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建手机对象</span></span><br><span class="line">    Pho1 p1 = <span class="keyword">new</span> Pho1();</span><br><span class="line">    <span class="comment">//给对象的成员变量赋值</span></span><br><span class="line">    p1.brand = <span class="string">&quot;华为&quot;</span>;</span><br><span class="line"><span class="comment">//        p1.price = &quot;9999&quot;; //注意  赋值需要注意成员变量的数据类型</span></span><br><span class="line">    p1.price = <span class="number">9999</span>;</span><br><span class="line">    p1.color = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">    System.out.println(p1.brand+<span class="string">&quot;,&quot;</span>+p1.price+<span class="string">&quot;,&quot;</span>+p1.color);</span><br><span class="line">    p1.call(<span class="string">&quot;小方&quot;</span>);</span><br><span class="line">    p1.sendMessage();</span><br><span class="line">    p1.playGame();</span><br><span class="line">    Pho1 p2 = <span class="keyword">new</span> Pho1();</span><br><span class="line">    <span class="comment">//给对象的成员变量赋值</span></span><br><span class="line">    p2.brand = <span class="string">&quot;小米&quot;</span>;</span><br><span class="line"><span class="comment">//        p1.price = &quot;9999&quot;; //注意  赋值需要注意成员变量的数据类型</span></span><br><span class="line">    p2.price = <span class="number">1999</span>;</span><br><span class="line">    p2.color = <span class="string">&quot;black&quot;</span>;</span><br><span class="line">    System.out.println(p2.brand+<span class="string">&quot;,&quot;</span>+p2.price+<span class="string">&quot;,&quot;</span>+p2.color);</span><br><span class="line">    p2.call(<span class="string">&quot;雷军&quot;</span>);</span><br><span class="line">    p2.sendMessage();</span><br><span class="line">    p2.playGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//华为,9999,blue</span></span><br><span class="line"><span class="comment">//给小方打电话...</span></span><br><span class="line"><span class="comment">//群发短信</span></span><br><span class="line"><span class="comment">//玩游戏</span></span><br><span class="line"><span class="comment">//小米,1999,black</span></span><br><span class="line"><span class="comment">//给雷军打电话...</span></span><br><span class="line"><span class="comment">//群发短信</span></span><br><span class="line"><span class="comment">//玩游戏</span></span><br></pre></td></tr></table></figure><p>两个对象的内存图解如下所示:</p><p><img src="https://i.loli.net/2021/09/02/w1CfPstNVqBx3ce.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pho2</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义成员变量</span></span><br><span class="line">    <span class="comment">//品牌</span></span><br><span class="line">    String brand;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    String color;</span><br><span class="line">    <span class="comment">//定义成员方法</span></span><br><span class="line">    <span class="comment">//打电话</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;给&quot;</span>+s+<span class="string">&quot;打电话...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//发短信</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;群发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//玩游戏</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;玩游戏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建手机对象</span></span><br><span class="line">        Pho2 p1 = <span class="keyword">new</span> Pho2();</span><br><span class="line">        <span class="comment">//给对象的成员变量赋值</span></span><br><span class="line">        p1.brand = <span class="string">&quot;华为&quot;</span>;</span><br><span class="line"><span class="comment">//        p1.price = &quot;9999&quot;; //注意  赋值需要注意成员变量的数据类型</span></span><br><span class="line">        p1.price = <span class="number">9999</span>;</span><br><span class="line">        p1.color = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">        System.out.println(p1.brand+<span class="string">&quot;,&quot;</span>+p1.price+<span class="string">&quot;,&quot;</span>+p1.color);</span><br><span class="line">        p1.call(<span class="string">&quot;杨老板&quot;</span>);</span><br><span class="line">        p1.sendMessage();</span><br><span class="line">        p1.playGame();</span><br><span class="line">        Pho2 p2 = <span class="keyword">new</span> Pho2();</span><br><span class="line">        <span class="comment">//给对象的成员变量赋值</span></span><br><span class="line">        p2.brand = <span class="string">&quot;小米&quot;</span>;</span><br><span class="line"><span class="comment">//        p1.price = &quot;9999&quot;; //注意  赋值需要注意成员变量的数据类型</span></span><br><span class="line">        p2.price = <span class="number">1999</span>;</span><br><span class="line">        p2.color = <span class="string">&quot;black&quot;</span>;</span><br><span class="line">        System.out.println(p2.brand+<span class="string">&quot;,&quot;</span>+p2.price+<span class="string">&quot;,&quot;</span>+p2.color);</span><br><span class="line">        p2.call(<span class="string">&quot;雷军&quot;</span>);</span><br><span class="line">        p2.sendMessage();</span><br><span class="line">        p2.playGame();</span><br><span class="line">        <span class="comment">//创建第三个对象</span></span><br><span class="line">        Pho2 p3 = p1;</span><br><span class="line">        p3.price = <span class="number">999</span>;</span><br><span class="line">        System.out.println(p1.price); <span class="comment">//999</span></span><br><span class="line">        System.out.println(p3.brand+<span class="string">&quot;,&quot;</span>+p3.price+<span class="string">&quot;,&quot;</span>+p3.color); <span class="comment">//&quot;华为&quot;，999，&quot;blue&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//华为,9999,blue</span></span><br><span class="line"><span class="comment">//给杨老板打电话...</span></span><br><span class="line"><span class="comment">//群发短信</span></span><br><span class="line"><span class="comment">//玩游戏</span></span><br><span class="line"><span class="comment">//小米,1999,black</span></span><br><span class="line"><span class="comment">//给雷军打电话...</span></span><br><span class="line"><span class="comment">//群发短信</span></span><br><span class="line"><span class="comment">//玩游戏</span></span><br><span class="line"><span class="comment">//999</span></span><br><span class="line"><span class="comment">//华为,999,blue</span></span><br></pre></td></tr></table></figure><p>3个对象的内存图解如下所示:</p><p><img src="https://i.loli.net/2021/09/02/5mIu9GOyUEBfVQn.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组以及Java中的内存分配</title>
      <link href="/2021/09/02/%E6%95%B0%E7%BB%84%E4%BB%A5%E5%8F%8AJava%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
      <url>/2021/09/02/%E6%95%B0%E7%BB%84%E4%BB%A5%E5%8F%8AJava%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="一维数组以及Java中的内存分配"><a href="#一维数组以及Java中的内存分配" class="headerlink" title="一维数组以及Java中的内存分配"></a>一维数组以及Java中的内存分配</h1><h2 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h2><p>1、数组是存储同一种数据类型多个元素的集合。也可以看成是一个容器。<br>2、数组既可以存储基本数据类型，也可以存储引用数据类型。</p><p>语句定义格式：<br>  1、数据类型[] 数组名<br>    举例：int[] arr1  推荐使用第一种定义方式<br>  2、数据类型 数组名[]<br>    举例：long arr2[]<br>  注意事项：<br>    针对数组定义两种格式，推荐使用第一种格式。因为第一种的可读性更强。<br>    第二种可以早期的时候确实有很多人这样用。不过，现在这样用的人越来越少了。</p><p>如果只是单纯地定义了数组是没有任何意义的，因为里面没有值，想要使用它，必须先初始化。<br>那么如何初始化呢？<br>Java中的数组必须先初始化,然后才能使用。</p><h3 id="初始化："><a href="#初始化：" class="headerlink" title="初始化："></a>初始化：</h3><p>​    所谓初始化：就是为数组中的数组元素分配内存空间，并为每个数组元素赋值。<br>数组初始化：<br>  1、动态初始化：初始化时只指定数组长度，由系统自动为数组分配初始值。<br>​    先不赋值<br>  2、静态初始化：初始化时指定每个数组元素的初始值，由系统决定数组长度。<br>​    先赋值</p><p>动态初始化：初始化时只指定数组长度，由系统为数组分配初始值。<br>动态初始化的格式：数据类型[] 数组名 = new 数据类型[数组长度];<br>举例：int[] arr = new int[3];<br>解释：定义了一个int类型的数组，这个数组中可以存放3个int类型的值。</p><h2 id="Java中的内存地址的分配"><a href="#Java中的内存地址的分配" class="headerlink" title="Java中的内存地址的分配"></a>Java中的内存地址的分配</h2><p><img src="https://i.loli.net/2021/09/02/IBuvZSPGCpkEjFw.png"></p><p>例如:定义一个数组，并为其赋值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//定义一个数组</span></span><br><span class="line">        <span class="keyword">int</span> []arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        System.out.println(arr);</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">//为数组赋初值</span></span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">200</span>;</span><br><span class="line">        <span class="comment">//输出数组名</span></span><br><span class="line">        System.out.println(arr);</span><br><span class="line">        <span class="comment">//输出元素值</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[I@28d93b30</span></span><br><span class="line"><span class="comment">//0</span></span><br><span class="line"><span class="comment">//0</span></span><br><span class="line"><span class="comment">//[I@28d93b30</span></span><br><span class="line"><span class="comment">//100</span></span><br><span class="line"><span class="comment">//200</span></span><br><span class="line"><span class="comment">//0</span></span><br></pre></td></tr></table></figure><h3 id="定义两个数组，分别动态初始化后，手动赋值，并打印数组名和个元素值"><a href="#定义两个数组，分别动态初始化后，手动赋值，并打印数组名和个元素值" class="headerlink" title="定义两个数组，分别动态初始化后，手动赋值，并打印数组名和个元素值"></a>定义两个数组，分别动态初始化后，手动赋值，并打印数组名和个元素值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义第一个数组</span></span><br><span class="line">        <span class="keyword">int</span> []arr = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">22</span>;</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="number">33</span>;</span><br><span class="line">        System.out.println(arr);</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">        <span class="comment">//定义第二个数组</span></span><br><span class="line">        <span class="keyword">int</span> []arr1 = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">2</span>];</span><br><span class="line">        arr1[<span class="number">0</span>] = <span class="number">44</span>;</span><br><span class="line">        arr1[<span class="number">1</span>] = <span class="number">55</span>;</span><br><span class="line">        System.out.println(arr1[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(arr1[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[I@28d93b30</span></span><br><span class="line"><span class="comment">//11</span></span><br><span class="line"><span class="comment">//22</span></span><br><span class="line"><span class="comment">//33</span></span><br><span class="line"><span class="comment">//44</span></span><br><span class="line"><span class="comment">//55</span></span><br></pre></td></tr></table></figure><p>图解如下:</p><p><img src="https://i.loli.net/2021/09/02/m1OMxWhKFL7cDaw.png"></p><p>举例<br>定义第一个数组，动态初始化，并手动赋值，并打印数组名词以及各元素值<br>定义第二个数组，动态初始化，并手动赋值，并打印数组名词以及各元素值<br>定义第三个数组，将第一个数组的地址值赋给第三个数组。（注意：数组的数据类型要一致）<br>并手动赋值，并打印数组名词以及各元素值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义第一个数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        arr1[<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        arr1[<span class="number">1</span>] = <span class="number">22</span>;</span><br><span class="line">        arr1[<span class="number">2</span>] = <span class="number">33</span>;</span><br><span class="line">        System.out.println(arr1);</span><br><span class="line">        System.out.println(arr1[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(arr1[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(arr1[<span class="number">2</span>]);</span><br><span class="line">        <span class="comment">//定义第二个数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        arr2[<span class="number">0</span>] = <span class="number">44</span>;</span><br><span class="line">        arr2[<span class="number">1</span>] = <span class="number">55</span>;</span><br><span class="line">        arr2[<span class="number">2</span>] = <span class="number">66</span>;</span><br><span class="line">        System.out.println(arr2);</span><br><span class="line">        System.out.println(arr2[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(arr2[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(arr2[<span class="number">2</span>]);</span><br><span class="line">        <span class="comment">//这是第三个数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr3 = arr1;</span><br><span class="line">        arr3[<span class="number">0</span>] = <span class="number">77</span>;</span><br><span class="line">        arr3[<span class="number">1</span>] = <span class="number">88</span>;</span><br><span class="line">        System.out.println(arr3); <span class="comment">//打印的是arr1的地址值</span></span><br><span class="line">        System.out.println(arr1[<span class="number">0</span>]); <span class="comment">//77</span></span><br><span class="line">        System.out.println(arr1[<span class="number">1</span>]); <span class="comment">//88</span></span><br><span class="line">        System.out.println(arr1[<span class="number">2</span>]); <span class="comment">//33</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[I@28d93b30</span></span><br><span class="line"><span class="comment">//11</span></span><br><span class="line"><span class="comment">//22</span></span><br><span class="line"><span class="comment">//33</span></span><br><span class="line"><span class="comment">//[I@1b6d3586</span></span><br><span class="line"><span class="comment">//44</span></span><br><span class="line"><span class="comment">//55</span></span><br><span class="line"><span class="comment">//66</span></span><br><span class="line"><span class="comment">//[I@28d93b30</span></span><br><span class="line"><span class="comment">//77</span></span><br><span class="line"><span class="comment">//88</span></span><br><span class="line"><span class="comment">//33</span></span><br></pre></td></tr></table></figure><p>图解如下:</p><p><img src="https://i.loli.net/2021/09/02/ZpSVckT7IwLyC91.png"></p><h2 id="数组的静态初始化"><a href="#数组的静态初始化" class="headerlink" title="数组的静态初始化"></a>数组的静态初始化</h2><p>数组的静态初始化：<br>格式：数据类型[] 数组名 = new 数据类型[]{元素1,元素2,…};<br>简化格式：数据类型[] 数组名 = {元素1,元素2,…}</p><blockquote><p>举例：<br>    int[] arr = new int[]{1,2,3,4,5};</p><p>简化格式的举例：<br>        int[] arr1 = {6,7,8,9,10};</p><p>注意事项：<br>    1、不能同时使用动态初始化和静态初始化<br>        举例：<br>            int[] arr2 = new int[3]{1,2,3}; //错误</p></blockquote><h2 id="数组使用常见的异常"><a href="#数组使用常见的异常" class="headerlink" title="数组使用常见的异常"></a>数组使用常见的异常</h2><p>（1）数组索引越界<br><code>ArrayIndexOutOfBoundsException</code><br>访问到了数组中的不存在的索引时发生。<br>（2）空指针异常<br><code>NullPointerException</code><br>数组引用没有指向实体，却在操作实体中的元素时。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">40</span>&#125;;</span><br><span class="line">    </span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(arr[4]);</span></span><br><span class="line"></span><br><span class="line">        arr = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(arr[0]);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//40</span></span><br><span class="line"><span class="comment">//null</span></span><br></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>二维数组：<br>就是元素是一维数组的数组</p><h3 id="格式1："><a href="#格式1：" class="headerlink" title="格式1："></a>格式1：</h3><blockquote><p>数据类型[][] 变量名 = new 数据类型[m][n]</p></blockquote><blockquote><p>​    m:表示这个二维数组有多少个元素，其中这个元素是一维数组<br>​    n:表示每个一维数组的元素有多少个<br>注意：<br>​    一下格式也可以表示一个二维数组<br>​    a:数据类型 数组名称[][] = new 数据类型[m][n];<br>​    b:数据类型[] 数组名称[] = new 数据类型[m][n];<br>举例：<br>​    int x;<br>​    int y;<br>​    int x,y;<br>​    int[] x;<br>​    int[][] x;<br>​    int[] x[];<br>​    int x[][];</p></blockquote><p>例如:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个二维数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="comment">//定义了一个二维数组arr</span></span><br><span class="line">        <span class="comment">//这里的3代表是有3个一维数组</span></span><br><span class="line">        <span class="comment">//这里的2代表每个一维数组有2个元素</span></span><br><span class="line">        <span class="comment">//输出二维数组的名称</span></span><br><span class="line">        System.out.println(arr);    <span class="comment">//输出的是二维数组在堆内存对应的地址值</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]); <span class="comment">//输出的是第一个一维数组在堆内存对应的地址值</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]); <span class="comment">//输出的是第二个一维数组在堆内存对应的地址值</span></span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]); <span class="comment">//输出的是第三个一维数组在堆内存对应的地址值</span></span><br><span class="line">        <span class="comment">//输出二维数组对应的某几个元素</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(arr[0][3]);</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">[[I@28d93b30</span><br><span class="line">[I@1b6d3586</span><br><span class="line">[I@4554617c</span><br><span class="line">[I@74a14482</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="格式二："><a href="#格式二：" class="headerlink" title="格式二："></a>格式二：</h3><p>数据类型[][] 变量名 = new 数据类型[m][n]</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line">        System.out.println(arr);  <span class="comment">//二维数组的地址值 [[I@4554617c</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]); <span class="comment">//第一个元素的一维数组的地址值  null</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]); <span class="comment">//第二个元素的一维数组的地址值  null</span></span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]); <span class="comment">//第三个元素的一维数组的地址值  null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态地为每一个一维数组分配空间</span></span><br><span class="line">        arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]); <span class="comment">//第一个元素的一维数组的地址值 //[I@74a14482</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]); <span class="comment">//第二个元素的一维数组的地址值 //[I@1540e19d</span></span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]); <span class="comment">//第三个元素的一维数组的地址值 //[I@677327b6</span></span><br><span class="line">    </span><br><span class="line">        System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]); <span class="comment">//0</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>][<span class="number">1</span>]); <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">[[I@28d93b30</span><br><span class="line"><span class="keyword">null</span></span><br><span class="line"><span class="keyword">null</span></span><br><span class="line"><span class="keyword">null</span></span><br><span class="line">[I@1b6d3586</span><br><span class="line">[I@4554617c</span><br><span class="line">[I@74a14482</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>图解如下:</p><p><img src="https://i.loli.net/2021/09/02/x2YTtalgIEAmeRn.png"></p><h3 id="二维数组定义格式3："><a href="#二维数组定义格式3：" class="headerlink" title="二维数组定义格式3："></a>二维数组定义格式3：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(arr); <span class="comment">//二维数组的地址值</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]); <span class="comment">//二维数组的第一个元素，一维数组的地址值</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]); <span class="comment">//二维数组的第二个元素，一维数组的地址值</span></span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]); <span class="comment">//二维数组的第三个元素，一维数组的地址值</span></span><br><span class="line">    </span><br><span class="line">        System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]); <span class="comment">//打印的是第1个一维数组的第1个元素值</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>][<span class="number">1</span>]); <span class="comment">//打印的是第1个一维数组的第2个元素值</span></span><br><span class="line">    </span><br><span class="line">        System.out.println(arr[<span class="number">1</span>][<span class="number">0</span>]); <span class="comment">//打印的是第2个一维数组的第1个元素值</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>][<span class="number">1</span>]); <span class="comment">//打印的是第2个一维数组的第2个元素值</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>][<span class="number">2</span>]); <span class="comment">//打印的是第2个一维数组的第3个元素值</span></span><br><span class="line">    </span><br><span class="line">        System.out.println(arr[<span class="number">2</span>][<span class="number">0</span>]); <span class="comment">//打印的是第3个一维数组的第1个元素值</span></span><br><span class="line">        System.out.println(arr[<span class="number">2</span>][<span class="number">1</span>]); <span class="comment">//打印的是第3个一维数组的第2个元素值</span></span><br><span class="line">        System.out.println(arr[<span class="number">2</span>][<span class="number">2</span>]); <span class="comment">//打印的是第3个一维数组的第3个元素值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[[I@28d93b30</span></span><br><span class="line"><span class="comment">//[I@1b6d3586</span></span><br><span class="line"><span class="comment">//[I@4554617c</span></span><br><span class="line"><span class="comment">//[I@74a14482</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="comment">//5</span></span><br><span class="line"><span class="comment">//6</span></span><br><span class="line"><span class="comment">//7</span></span><br><span class="line"><span class="comment">//8</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流程控制语句和跳转控制语句</title>
      <link href="/2021/09/02/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%E5%92%8C%E8%B7%B3%E8%BD%AC%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
      <url>/2021/09/02/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%E5%92%8C%E8%B7%B3%E8%BD%AC%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="流程控制语句和跳转语句"><a href="#流程控制语句和跳转语句" class="headerlink" title="流程控制语句和跳转语句"></a>流程控制语句和跳转语句</h1><h2 id="循环结构-while循环结构"><a href="#循环结构-while循环结构" class="headerlink" title="循环结构(while循环结构)"></a>循环结构(while循环结构)</h2><p>while循环语句的基本格式：<br>基本格式：<br>while(判断条件语句){<br>循环体语句;<br>}<br>扩展格式：<br>while(判断条件语句){<br>循环体语句;<br>控制条件语句;<br>}</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhileDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*************使用for循环改进********************&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;***********使用while循环改进*****************&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;<span class="number">3</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//HelloWorld</span></span><br><span class="line"><span class="comment">//HelloWorld</span></span><br><span class="line"><span class="comment">//HelloWorld</span></span><br><span class="line"><span class="comment">//*************使用for循环改进********************</span></span><br><span class="line"><span class="comment">//HelloWorld</span></span><br><span class="line"><span class="comment">//HelloWorld</span></span><br><span class="line"><span class="comment">//HelloWorld</span></span><br><span class="line"><span class="comment">//***********使用while循环改进*****************</span></span><br><span class="line"><span class="comment">//HelloWorld</span></span><br><span class="line"><span class="comment">//HelloWorld</span></span><br><span class="line"><span class="comment">//HelloWorld</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            用while循环实现1-100之和</span></span><br><span class="line"><span class="comment">            注意：for循环与while循环之间的小区别：</span></span><br><span class="line"><span class="comment">                1、使用区别：控制条件语句所控制的那个变量，在for循环结束后，就不能再被访问到了，</span></span><br><span class="line"><span class="comment">                    而while循环结束还可以继续使用，如果你想继续使用，就用while，否则推荐使用for。</span></span><br><span class="line"><span class="comment">                    原因是for循环结束，该变量就从内存中消失，能够提高内存的使用效率。</span></span><br><span class="line"><span class="comment">                2、场景区别：</span></span><br><span class="line"><span class="comment">                    for循环适合针对一个范围判断进行操作</span></span><br><span class="line"><span class="comment">                    while循环适合判断次数不明确操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhileDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;1-100的和为：&quot;</span>+sum);</span><br><span class="line">        System.out.println(<span class="string">&quot;**********************使用while循环进行改进*********************&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i =<span class="number">1</span>;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">            sum+=i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;1-100的和为：&quot;</span>+sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1-100的和为：5050</span></span><br><span class="line"><span class="comment">//**********************使用while循环进行改进*********************</span></span><br><span class="line"><span class="comment">//1-100的和为：5050</span></span><br></pre></td></tr></table></figure><h2 id="循环结构-do…while循环语句"><a href="#循环结构-do…while循环语句" class="headerlink" title="循环结构(do…while循环语句)"></a>循环结构(do…while循环语句)</h2><p>do…while循环语句格式：<br>基本格式：<br>do{<br>循环体语句;<br>}while(判断条件语句);<br>扩展格式：<br>do{<br>循环体语句;<br>控制条件语句;<br>}while(判断条件语句);</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoWhileDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//求1-100的和</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">//定义的是循环的次数</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//定义的是总和</span></span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            sum+=i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">while</span>(i&lt;=<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1-100的和为：&quot;</span>+sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1-100的和为：5050</span></span><br></pre></td></tr></table></figure><h2 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h2><p>主要有三个跳转语句：</p><pre><code> break    中断 continue    继续 return    返回</code></pre><h3 id="break："><a href="#break：" class="headerlink" title="break："></a>break：</h3><p>​    使用场景：<br>​            1、在选择结构switch语句中<br>​            2、在循环语句中，加入了if判断的情况<br>​            3、离开使用场景的存在是没有意义的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControlDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你想要的星期的数字（1-7）&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">        <span class="comment">//break跳出当前控制语句</span></span><br><span class="line">        <span class="keyword">switch</span> (num)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期二&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;程序没有匹配&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;*********************************&quot;</span>);</span><br><span class="line">        <span class="comment">//循环打印1-10，加入break，并在3的时候停止for循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>break的作用：<br>跳出单层循环：<br>跳出多层循环：<br>带标签的跳出：<br>格式：标签名: 循环语句</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControlDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                System.out.print(i+<span class="string">&quot;*&quot;</span>+j+<span class="string">&quot;=&quot;</span>+(i*j)+<span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*******加入break循环*********&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">4</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(i+<span class="string">&quot;*&quot;</span>+j+<span class="string">&quot;=&quot;</span>+(i*j)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;*****加入break带标签跳出多层循环******&quot;</span>);</span><br><span class="line">        wc:<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            nc:<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">4</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span> wc;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(i+<span class="string">&quot;*&quot;</span>+j+<span class="string">&quot;=&quot;</span>+(i*j)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span>*<span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="number">2</span>*<span class="number">1</span>=<span class="number">2</span><span class="number">2</span>*<span class="number">2</span>=<span class="number">4</span></span><br><span class="line"><span class="number">3</span>*<span class="number">1</span>=<span class="number">3</span><span class="number">3</span>*<span class="number">2</span>=<span class="number">6</span><span class="number">3</span>*<span class="number">3</span>=<span class="number">9</span></span><br><span class="line"><span class="number">4</span>*<span class="number">1</span>=<span class="number">4</span><span class="number">4</span>*<span class="number">2</span>=<span class="number">8</span><span class="number">4</span>*<span class="number">3</span>=<span class="number">12</span><span class="number">4</span>*<span class="number">4</span>=<span class="number">16</span></span><br><span class="line"><span class="number">5</span>*<span class="number">1</span>=<span class="number">5</span><span class="number">5</span>*<span class="number">2</span>=<span class="number">10</span><span class="number">5</span>*<span class="number">3</span>=<span class="number">15</span><span class="number">5</span>*<span class="number">4</span>=<span class="number">20</span><span class="number">5</span>*<span class="number">5</span>=<span class="number">25</span></span><br><span class="line"><span class="number">6</span>*<span class="number">1</span>=<span class="number">6</span><span class="number">6</span>*<span class="number">2</span>=<span class="number">12</span><span class="number">6</span>*<span class="number">3</span>=<span class="number">18</span><span class="number">6</span>*<span class="number">4</span>=<span class="number">24</span><span class="number">6</span>*<span class="number">5</span>=<span class="number">30</span><span class="number">6</span>*<span class="number">6</span>=<span class="number">36</span></span><br><span class="line"><span class="number">7</span>*<span class="number">1</span>=<span class="number">7</span><span class="number">7</span>*<span class="number">2</span>=<span class="number">14</span><span class="number">7</span>*<span class="number">3</span>=<span class="number">21</span><span class="number">7</span>*<span class="number">4</span>=<span class="number">28</span><span class="number">7</span>*<span class="number">5</span>=<span class="number">35</span><span class="number">7</span>*<span class="number">6</span>=<span class="number">42</span><span class="number">7</span>*<span class="number">7</span>=<span class="number">49</span></span><br><span class="line"><span class="number">8</span>*<span class="number">1</span>=<span class="number">8</span><span class="number">8</span>*<span class="number">2</span>=<span class="number">16</span><span class="number">8</span>*<span class="number">3</span>=<span class="number">24</span><span class="number">8</span>*<span class="number">4</span>=<span class="number">32</span><span class="number">8</span>*<span class="number">5</span>=<span class="number">40</span><span class="number">8</span>*<span class="number">6</span>=<span class="number">48</span><span class="number">8</span>*<span class="number">7</span>=<span class="number">56</span><span class="number">8</span>*<span class="number">8</span>=<span class="number">64</span></span><br><span class="line"><span class="number">9</span>*<span class="number">1</span>=<span class="number">9</span><span class="number">9</span>*<span class="number">2</span>=<span class="number">18</span><span class="number">9</span>*<span class="number">3</span>=<span class="number">27</span><span class="number">9</span>*<span class="number">4</span>=<span class="number">36</span><span class="number">9</span>*<span class="number">5</span>=<span class="number">45</span><span class="number">9</span>*<span class="number">6</span>=<span class="number">54</span><span class="number">9</span>*<span class="number">7</span>=<span class="number">63</span><span class="number">9</span>*<span class="number">8</span>=<span class="number">72</span><span class="number">9</span>*<span class="number">9</span>=<span class="number">81</span></span><br><span class="line">*******加入<span class="keyword">break</span>循环*********</span><br><span class="line"><span class="number">1</span>*<span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="number">2</span>*<span class="number">1</span>=<span class="number">2</span><span class="number">2</span>*<span class="number">2</span>=<span class="number">4</span></span><br><span class="line"><span class="number">3</span>*<span class="number">1</span>=<span class="number">3</span><span class="number">3</span>*<span class="number">2</span>=<span class="number">6</span><span class="number">3</span>*<span class="number">3</span>=<span class="number">9</span></span><br><span class="line"><span class="number">4</span>*<span class="number">1</span>=<span class="number">4</span><span class="number">4</span>*<span class="number">2</span>=<span class="number">8</span><span class="number">4</span>*<span class="number">3</span>=<span class="number">12</span></span><br><span class="line"><span class="number">5</span>*<span class="number">1</span>=<span class="number">5</span><span class="number">5</span>*<span class="number">2</span>=<span class="number">10</span><span class="number">5</span>*<span class="number">3</span>=<span class="number">15</span></span><br><span class="line"><span class="number">6</span>*<span class="number">1</span>=<span class="number">6</span><span class="number">6</span>*<span class="number">2</span>=<span class="number">12</span><span class="number">6</span>*<span class="number">3</span>=<span class="number">18</span></span><br><span class="line"><span class="number">7</span>*<span class="number">1</span>=<span class="number">7</span><span class="number">7</span>*<span class="number">2</span>=<span class="number">14</span><span class="number">7</span>*<span class="number">3</span>=<span class="number">21</span></span><br><span class="line"><span class="number">8</span>*<span class="number">1</span>=<span class="number">8</span><span class="number">8</span>*<span class="number">2</span>=<span class="number">16</span><span class="number">8</span>*<span class="number">3</span>=<span class="number">24</span></span><br><span class="line"><span class="number">9</span>*<span class="number">1</span>=<span class="number">9</span><span class="number">9</span>*<span class="number">2</span>=<span class="number">18</span><span class="number">9</span>*<span class="number">3</span>=<span class="number">27</span></span><br><span class="line">*****加入<span class="keyword">break</span>带标签跳出多层循环******</span><br><span class="line"><span class="number">1</span>*<span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="number">2</span>*<span class="number">1</span>=<span class="number">2</span><span class="number">2</span>*<span class="number">2</span>=<span class="number">4</span></span><br><span class="line"><span class="number">3</span>*<span class="number">1</span>=<span class="number">3</span><span class="number">3</span>*<span class="number">2</span>=<span class="number">6</span><span class="number">3</span>*<span class="number">3</span>=<span class="number">9</span></span><br><span class="line"><span class="number">4</span>*<span class="number">1</span>=<span class="number">4</span><span class="number">4</span>*<span class="number">2</span>=<span class="number">8</span><span class="number">4</span>*<span class="number">3</span>=<span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="continue："><a href="#continue：" class="headerlink" title="continue："></a>continue：</h3><p>使用场景：<br>1、在循环语句中<br>2、离开使用场景的存在是没有意义的</p><h3 id="return："><a href="#return：" class="headerlink" title="return："></a>return：</h3><p>结束循环其实是结束了main方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControlDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//循环打印1-10，加入continue</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;<span class="comment">//跳出当前此次循环，继续后面循环</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;<span class="comment">//在这里面 3 就被抽走了</span></span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;********改为return*********&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="comment">//5</span></span><br><span class="line"><span class="comment">//6</span></span><br><span class="line"><span class="comment">//7</span></span><br><span class="line"><span class="comment">//8</span></span><br><span class="line"><span class="comment">//9</span></span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//********改为return*********</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>方法：<br>方法就是完成特定功能的代码块<br>在很多语言里面都有函数的定义<br>函数在Java中被称为方法<br>语句格式：<br>修饰符 返回值类型 方法名(参数类型 参数名1，参数类型 参数名2…) {<br>函数体;<br>return 返回值;<br>}<br>名词解释：<br>修饰符：修饰符 比较多，后面会详细介绍。目前public static<br>返回值类型：<br>就是return返回的值的类型<br>方法名：<br>一个名称，为了方便我们调用方法，自己起的名字，方便我们调用。</p><blockquote><p>参数：<br>        1、形参<br>            定义在方法上的参数名<br>        2、实参<br>            实际调用方法的时候传入的值<br>    参数类型：<br>        限定调用方法时传入参数的数据类型<br>    参数名：（形参）<br>        是一个变量，接收调用方法时传入的参数。<br>    函数体：<br>        完成功能的代码，实现方法的主要逻辑功能<br>    return：<br>        结束方法以及返回方法指定类型的值<br>    返回值：<br>        程序被return带回的结果，返回给调用者</p></blockquote><p>注意:方法和方法是平级关系，不能被嵌套使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> result = sum(x,y);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = x+y;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//30</span></span><br></pre></td></tr></table></figure><p>上式图解</p><p><img src="https://i.loli.net/2021/09/02/yjn6WK4NCUPFwd7.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入行数&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入列数&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> y = sc.nextInt();</span><br><span class="line">    </span><br><span class="line">        printStar(x,y);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStar</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请输入行数</span></span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="comment">//请输入列数</span></span><br><span class="line"><span class="comment">//5</span></span><br><span class="line"><span class="comment">//* ****</span></span><br><span class="line"><span class="comment">//*    ****</span></span><br><span class="line"><span class="comment">//*    ****</span></span><br><span class="line"><span class="comment">//*    ****</span></span><br></pre></td></tr></table></figure><h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><p>方法的重载：<br>在同一个类中，允许存在一个以上的同名方法，<br>只要它们的参数个数或者参数类型不同即可。</p><p>方法重载的特点：<br>1、与返回值类型无关，只看方法名和参数列表<br>2、在调用时，虚拟机通过参数列表的不同来区分同名方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionDemo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//求加法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> d = <span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">byte</span> e = <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = x+y;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x+y+z);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x+y+z+i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum3</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">byte</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x+y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中键盘录入以及循环结构</title>
      <link href="/2021/09/02/Java%E4%B8%AD%E9%94%AE%E7%9B%98%E5%BD%95%E5%85%A5%E4%BB%A5%E5%8F%8A%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
      <url>/2021/09/02/Java%E4%B8%AD%E9%94%AE%E7%9B%98%E5%BD%95%E5%85%A5%E4%BB%A5%E5%8F%8A%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="Java中键盘录入以及循环结构"><a href="#Java中键盘录入以及循环结构" class="headerlink" title="Java中键盘录入以及循环结构"></a>Java中键盘录入以及循环结构</h1><h2 id="键盘录入"><a href="#键盘录入" class="headerlink" title="键盘录入"></a>键盘录入</h2><p>把数据改为键盘录入，可以提高程序的灵活性。<br>如何进行键盘录入：<br>1、导包（位置放到class定义的上面）<br><code>import java.util.Scanner;</code><br>2、创建对象<br><code>Scanner sc = new Scanner(System.in);</code><br>3、接收数据<br><code>int x = sc.nextInt();</code><br>    键盘录入两个数据，并对两个数据求和，输出结果<br>    键盘录入两个数据，获取两个结果中的最大值</p><p>  分析：<br>    1.导包<br>    2.创建Scanner对象<br>    3.使用对象的方法，输出两个值<br>    4.输出两个值相加的结果</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Scanner对象</span></span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入第一个数据&quot;</span>);</span><br><span class="line">​    <span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入第二个数据&quot;</span>);</span><br><span class="line">​    <span class="keyword">int</span> y = sc.nextInt();</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;两值相加的结果为：&quot;</span>+(x+y));</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;********************************************&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="comment">//键盘录入两个数据，获取两个数据中的最大值</span></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入第二题的第一个数据&quot;</span>);</span><br><span class="line">​    <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入第二题的第二个数据&quot;</span>);</span><br><span class="line">​    <span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line"></span><br><span class="line">​    <span class="comment">//使用三目运算符求最大值</span></span><br><span class="line">​    <span class="keyword">int</span> result = (a&gt;b)?a:b;</span><br><span class="line">​    System.out.println(<span class="string">&quot;最大值为：&quot;</span>+result);</span><br></pre></td></tr></table></figure><h2 id="流程控制语句中的-顺序结构"><a href="#流程控制语句中的-顺序结构" class="headerlink" title="流程控制语句中的 顺序结构"></a>流程控制语句中的 顺序结构</h2><p>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。<br>总的来说：写在前面的先执行，写在后面的后执行。</p><p>流程控制语句中的 选择结构<br>选择结构也被称为 分支结构。<br>选择结构有特定的语法规则，代码要执行具体的逻辑运算进行判断，逻辑运算的结果有两个，所以产生选择，按照不同的选择执行不同的代码。</p><p>Java中提供两种选择结构语句：<br>if语句<br>switch语句</p><p>if语句的三种格式：</p><h3 id="（1）if-关系表达式"><a href="#（1）if-关系表达式" class="headerlink" title="（1）if(关系表达式){"></a>（1）if(关系表达式){</h3><p>语句体<br>}</p><p>执行流程：<br>首先判断关系表达式里的结果值，无论关系表达式里面简单还是复杂，最后结果一定要是Boolean类型<br>如果是true就进入if大括号内，执行语句体<br>如果是false就不进入if大括号，继续执行后面的代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">90</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;a是小于90的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;程序执行完毕&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//程序执行完毕</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>if语句编写的注意事项<br>1、if判断里面的关系表达式一定要严格遵循结果是Boolean类型的规则<br>2、if语句控制的语句体如果是一条语句，大括号可以省略；<br>如果是多条语句，就不能省略，建议永远不省略<br>3、一般来说：有左大括号就没有分号，有分号就没有左大括号</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x = <span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">3</span>);<span class="comment">//这就默认有了一个空的语句体</span></span><br><span class="line">    <span class="comment">//这是一个普通的代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;x是大于3的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;程序执行完毕&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//x是大于3的</span></span><br><span class="line"><span class="comment">//程序执行完毕</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure><h3 id="（2）if-关系表达式"><a href="#（2）if-关系表达式" class="headerlink" title="（2）if(关系表达式){"></a>（2）if(关系表达式){</h3><p>语句体1;<br>}else{<br>语句体2;<br>}</p><p>执行流程：<br>1、先判断关系表达式里面的结果值，无论关系表达式里面是简单还是复杂，最后结果一定是Boolean类型<br>2、如果关系表达式的结果是true，那么就执行语句体1，不会执行else后面的语句体<br>3、如果关系表达式的结果是false，那么就执行else里面的语句体2</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo3</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> a = <span class="number">13965873016L</span>;</span><br><span class="line">    <span class="keyword">if</span>(!(a==<span class="number">13965873016L</span>))&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><h4 id="这里讲解一种三元运算符和if语句的第二种格式相转换的问题。"><a href="#这里讲解一种三元运算符和if语句的第二种格式相转换的问题。" class="headerlink" title="这里讲解一种三元运算符和if语句的第二种格式相转换的问题。"></a>这里讲解一种三元运算符和if语句的第二种格式相转换的问题。</h4><p>三元运算符，它根据比较判断后，给出的也是两个结果，所以，这种情况和if语句的第二种格式很相似，他们在某些情况下应该是可以相互转换的。<br>1、当选择结构存在最后输出的语句是控制台输出，就无法改进成三元运算符<br>2、当if第二种结构的最后输出语句是一个结果值的时候，可以使用三元运算符进行改进</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo6</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建Scanner对象</span></span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入第一个数&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入第二个数&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> y = sc.nextInt();</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y)&#123;<span class="comment">//不考虑相等的情况</span></span><br><span class="line">      System.out.println(<span class="string">&quot;最大值x：&quot;</span>+x);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;最大值y：&quot;</span>+y);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;*********************************&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;三元运算符进行改进&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> max = (x&gt;y)?x:y;</span><br><span class="line">    System.out.println(<span class="string">&quot;最大值：&quot;</span>+max);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请输入第一个数</span></span><br><span class="line"><span class="comment">//34</span></span><br><span class="line"><span class="comment">//请输入第二个数</span></span><br><span class="line"><span class="comment">//45</span></span><br><span class="line"><span class="comment">//最大值y：45</span></span><br><span class="line"><span class="comment">//*********************************</span></span><br><span class="line"><span class="comment">//三元运算符进行改进</span></span><br><span class="line"><span class="comment">//最大值：45</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">26</span></span><br><span class="line"><span class="number">27</span></span><br><span class="line"><span class="number">28</span></span><br></pre></td></tr></table></figure><h3 id="（3）if语句的第三种格式："><a href="#（3）if语句的第三种格式：" class="headerlink" title="（3）if语句的第三种格式："></a>（3）if语句的第三种格式：</h3><p>if(关系表达式1){<br>语句体1;<br>}else if(关系表达式){<br>语句体2;<br>}<br>…<br>else{<br>语句体n+1;<br>}</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo5</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建Scanner对象</span></span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入第一个数&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入第二个数&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> y = sc.nextInt();</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;最大值x:&quot;</span>+x);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (x==y)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;两个数相等&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;最大值y:&quot;</span>+y);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请输入第一个数</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//请输入第二个数</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//最大值y:2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">23</span></span><br></pre></td></tr></table></figure><p>这里补充一个小知识点：第三种情况下的else可以省去，但就不属于if中的格式了</p><pre><code> #### 练习题：使用if嵌套输出三个数中的最大值</code></pre><p>1</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo7</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入第一个数&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> x1 = sc.nextInt();</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入第二个数&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> x2 = sc.nextInt();</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入第三个数&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> x3 = sc.nextInt();</span><br><span class="line">    <span class="keyword">if</span>(x1 &gt; x2)&#123;</span><br><span class="line">      <span class="keyword">if</span>(x1 &gt; x3)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值是x1:&quot;</span>+x1);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x2 &gt; x3)&#123;   <span class="comment">//潜台词就是x1&lt;x3，x1&gt;x2</span></span><br><span class="line">      System.out.println(<span class="string">&quot;最大值是x2:&quot;</span>+x2);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;     <span class="comment">//潜台词就是x2&lt;x3，x1&lt;x3，x1&gt;x2</span></span><br><span class="line">      System.out.println(<span class="string">&quot;最大值是x3:&quot;</span>+x3);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请输入第一个数</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//请输入第二个数</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//请输入第三个数</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//最大值是x3:3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">26</span></span><br><span class="line"><span class="number">27</span></span><br><span class="line"><span class="number">28</span></span><br></pre></td></tr></table></figure><h2 id="流程控制语句中的-switch选择结构"><a href="#流程控制语句中的-switch选择结构" class="headerlink" title="流程控制语句中的 switch选择结构"></a>流程控制语句中的 switch选择结构</h2><p>switch语句格式：<br>switch(表达式){<br>case 值1：<br>语句体1;<br>break;<br>case 值2：<br>语句体2;<br>break;<br>…<br>default:<br>语句体n+1;<br>break;<br>}</p><p>switch表达式的一些注意点：<br>表达式的取值：byte、short、int（没有long）、char（不能有浮点数）<br>JDK5(1.5)之后可以是枚举<br>JDK7(1.7)之后可以是String<br>case后面跟的是要和表达式进行比较的值<br>语句体部分可以是一条或者多条语句<br>break表示中断，结束的意思，可以结束switch语句<br>default语句表示所有情况都不匹配的时候，就执行该处的内容，和if语句的else相似</p><p>执行流程：<br>1、首先计算表达式的值<br>2、拿着计算好的值与case对应值按照从上到下的顺序进行比较，如有相同，开始执行该case对应的语句体<br>3、当语句体执行完之后，会执行紧接着的break语句，执行break语句就代表着switch选择结构结束（跳出switch选择）<br>4、当从上到下依次寻找case对应的值的时候，没有找到相匹配的值，就会执行default中的语句体，最后跳出循环</p><h3 id="switch语句的注意事项"><a href="#switch语句的注意事项" class="headerlink" title="switch语句的注意事项:"></a>switch语句的注意事项:</h3><p>case 后面只能是常量，不能是变量，而且，多个case后面的值不能出现相同的<br>default可以省略吗?<br>可以省略。一般不建议。除非判断的值是固定的。(单选题)<br>break可以省略吗?<br>可以省略，一般不建议。否则结果可能不是你想要的<br>当所有break语句都省略的时候，表达式的值与case的值进行匹配，从匹配到的那个case语句体开始执行，一直执行到结尾，直到最后一个语句<br>default的位置一定要在最后吗?<br>可以出现在switch语句任意位置。<br>1、当计算完表达式的值后，先与每一个case按照顺序去匹配，如果所有的case都补匹配，那么最后再执行default,这个和你default放再哪里的<br>位置并没有关系。<br>2、即使你放在了第一个，某些case没有写break语句，那么也会先去匹配case，记住一句话，只有当所有case都不匹配的时候，才会去执行<br>default;<br>switch语句的结束条件<br>遇到break<br>执行到程序的末尾</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchDemo5</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">switch</span>(x)&#123;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        y++; <span class="comment">// 4</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        y++; <span class="comment">// 5</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        y++; <span class="comment">// 6</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;y=&quot;</span>+y); <span class="comment">// 6</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><h2 id="流程控制语句-for循环"><a href="#流程控制语句-for循环" class="headerlink" title="流程控制语句 for循环"></a>流程控制语句 for循环</h2><p>for(初始化语句;判断条件语句;控制条件语句) {<br>循环体语句;<br>}<br>/*<br>循环结构：<br>循环语句可以在满足循环条件的情况下，反复执行某一段代码，<br>这段被重复执行的代码被称为循环体语句，当反复执行这个循环体时，<br>需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形成死循环。</p><h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><p>1、for循环<br>2、while循环</p><h3 id="循环的组成："><a href="#循环的组成：" class="headerlink" title="循环的组成："></a>循环的组成：</h3><p>初始化语句：<br>一条或者多条语句，这些语句完成一些初始化操作。<br>判断条件语句：<br>这是一个boolean 表达式，这个表达式能决定是否执行循环体。<br>循环体语句：<br>这个部分是循环体语句，也就是我们要多次做的事情。<br>控制条件语句：<br>这个部分在一次循环体结束后，下一次循环判断条件执行前执行。通过用于控制循环条件中的变量，使得循环在合适的时候结束。</p><p>for循环：<br>语句格式：<br>for(初始化语句;判断语句;控制条件语句){<br>语句体;<br>}</p><p> 执行流程：<br>  1、先初始化语句<br>  2、执行判断语句，判断语句一般返回的结果是boolean类型<br>    如果判断语句返回的是true,则执行语句体；<br>    如果判断语句返回的是false,则跳出当前for循环<br>  3、如果判断语句是true,且执行完了语句体，接着去执行控制条件语句<br>  4、再者去执行判断语句，如果是true，继续执行第二步。<br>使用for循环的注意事项：<br>1、判断条件语句的结果是一个boolean类型<br>2、循环体语句如果是一条语句，大括号可以省略；<br>如果是多条语句，大括号不能省略。建议永远不要省略，如果省略，循环只对第一条语句有效。<br>3、一般来说：有左大括号就没有分号，有分号就没有左大括号<br>4、初始化语句可以不在for循环的语句结构中出现，但是必须在其执行之前定义。<br>5、判断语句一定不能不能省略，否则就是死循环<br>6、控制条件语句可以不在for循环的语句结构中出现，但是，必须在语句体中进行变化。<br>*/</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForDemo2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;i&lt;=<span class="number">10</span>;) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;HelloWorld!&quot;</span>);</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//想要终止for的死循环，就将判断条件的结果写为false即可。</span></span><br><span class="line">    <span class="keyword">for</span>(;i&lt;<span class="number">0</span>;)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;这是死循环&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数据类型和运算符</title>
      <link href="/2021/09/02/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2021/09/02/Java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="Java数据类型和运算符"><a href="#Java数据类型和运算符" class="headerlink" title="Java数据类型和运算符"></a>Java数据类型和运算符</h1><h2 id="以下是数据类型以及Java中运算符的一些理解"><a href="#以下是数据类型以及Java中运算符的一些理解" class="headerlink" title="以下是数据类型以及Java中运算符的一些理解"></a>以下是数据类型以及Java中运算符的一些理解</h2><p>Java是一种 强类型 的语言，每种数据都定义了一种具体的数据类型，并且在内存中分配了不同大小空间。<br>数据类型分为基本数据类型以及引用数据类型，这里暂时只提及基本数据类型。</p><p>（由小到大）<br>整数类型   byte、short、int、long<br>浮点类型   float、double<br>字符型   char<br>布尔型   boolean</p><p>数据类型的大小范围：<br>类型                 占用存储空间             表数范围<br>byte                 1字节                   -128<del>127     (2的八次幂)<br>short               2字节                   -2^15</del>2^15-1   （2的十六次幂，但从零开始）<br>int                 4字节                   -2^31<del>2^31-1<br>long                 8字节                   -2^63</del>2^63-1<br>float                 4字节                   -3.403E38<del>3.403E38<br>double               8字节                   -1.798E308</del>1.798E308</p><p>作用域：<br>   变量定义在哪一级大括号中，哪个大括号的范围就是这个变量的作用域。相同的作用域中不能定义两个同名变量。</p><p>初始化值：<br>   没有初始化值不能直接使用<br>2.运算符<br>运算符包括算术运算符、赋值运算符、比较运算符、逻辑运算符、位运算符、三目运算符<br>+的作用：<br>加法<br>正数<br>字符串连接符</p><p>3.关系运算符<br>== 相等于 4==3 false<br>!= 不等于 4!=3 true<br>&lt; 小于 4&lt;3 false<br>&gt; 大于 4&gt;3 true<br>&lt;= 小于等于 4&lt;=3 false<br>&gt;= 大于等于 4&gt;=3 false</p><p>关系运算符的计算结果是一个Boolean值，true或false</p><p>4.逻辑运算符<br>运算符 运算 范例 结果<br>&amp; AND(与) false&amp;true false<br>| OR(或) false|true true<br>^ XOR(异或) true^false true<br>! Not(非) !true false<br>&amp;&amp; AND(短路) false&amp;true false<br>|| OR(短路) false||true true</p><p>特点：一般用于连接Boolean类型的表达式或值<br>结论：<br>&amp; 逻辑与：有false则false<br>| 逻辑或：有true则true<br>^ 逻辑异或 相同为false，不同为true<br>！非：就是非<br>&amp;&amp;，||<br>&amp;&amp;和&amp;的区别，||和|的区别<br>A：最终结果是一样的<br>B：&amp;&amp;具有短路效果，左边为false时，右边不执行<br>||具有短路效果，左边为true时，右边不执行</p><p>5.位运算符<br>&lt;&lt; 左移 3&lt;&lt;2 = 12 –&gt;322=12<br>&gt;&gt; 右移 3&gt;&gt;1 = 1 –&gt;3/2=1<br>&gt;&gt;&gt; 无符号右移 3&gt;&gt;&gt;1 = 1 –&gt; 3/2=1<br>&amp; 与运算 6&amp;3 = 2<br>| 或运算 6|3 = 7<br>^ 异或运算 6^3 = 5<br>~ 反码 ~6 = -7</p>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java打印1000以内的完数</title>
      <link href="/2021/09/02/Java%E6%89%93%E5%8D%B01000%E4%BB%A5%E5%86%85%E7%9A%84%E5%AE%8C%E6%95%B0/"/>
      <url>/2021/09/02/Java%E6%89%93%E5%8D%B01000%E4%BB%A5%E5%86%85%E7%9A%84%E5%AE%8C%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Java实现1000以内完数的输出"><a href="#Java实现1000以内完数的输出" class="headerlink" title="Java实现1000以内完数的输出"></a>Java实现1000以内完数的输出</h1><h2 id="实现代码如下所示"><a href="#实现代码如下所示" class="headerlink" title="实现代码如下所示"></a>实现代码如下所示</h2><p>实现代码如下所示:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">wanshu</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">1000</span>;i++)&#123;<span class="comment">//遍历1000以内的数</span></span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= i/<span class="number">2</span>;j++)&#123;<span class="comment">//优化1：只需要和i/2相比较，优化了时间。</span></span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">                    sum += j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == sum)&#123;<span class="comment">//如果输入的i和累加之后的数值相同，那就说明这个数是完数。</span></span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引用图片</title>
      <link href="/2021/09/02/title/"/>
      <url>/2021/09/02/title/</url>
      
        <content type="html"><![CDATA[<img src="/2021/09/02/title/aisi.jpg" class><p>引用图片的格式</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
